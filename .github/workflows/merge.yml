name: Auto Merge feature branches to main and Organize Directory

on:
  push:
    branches:
      - 'feature[0-9]*/main'

jobs:
  auto-merge-and-organize:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge feature branch into main
        run: |
          set -e
          FEATURE_BRANCH="${GITHUB_REF#refs/heads/}"
          git fetch origin "$FEATURE_BRANCH"
          if git merge --no-ff origin/"$FEATURE_BRANCH" -m "Auto merge $FEATURE_BRANCH into main by GitHub Actions"; then
            echo "Merge successful."
          else
            echo "⚠️ Merge conflict detected. Aborting merge."
            git merge --abort
            exit 0
          fi

      - name: Organize directory by feature and extensions
        run: |
          # feature名だけ切り出し
          FEATURE_BRANCH_SHORT=$(echo "${GITHUB_REF#refs/heads/}" | cut -d'/' -f1)

          # featureブランチの全ファイルリストを取得（.githubは除外）
          FILES=$(git ls-tree -r --name-only origin/"$FEATURE_BRANCH_SHORT" | grep -v '^.github/')

          # 拡張子ごとのファイル数カウント
          declare -A ext_counts
          for file in $FILES; do
            if [[ "$file" == *.* ]]; then
              ext="${file##*.}"
              ((ext_counts[$ext]++))
            fi
          done

          # 最多拡張子を特定
          max_ext=""
          max_count=0
          for ext in "${!ext_counts[@]}"; do
            if (( ext_counts[$ext] > max_count )); then
              max_ext=$ext
              max_count=${ext_counts[$ext]}
            fi
          done

          target_dir="${FEATURE_BRANCH_SHORT}_${max_ext}"
          mkdir -p "$target_dir"

          echo "Created directory: $target_dir"

          # サブディレクトリ構造を保ったまま target_dir にコピー
          # --parents で相対パス構造ごとコピー
          for f in $FILES; do
            cp --parents "$f" "$target_dir"/
          done

          # コピー元を削除する場合（main直下構成を消してtarget_dirだけにする）
          for f in $FILES; do
            rm -rf "$f"
          done

      - name: Commit and push changes
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Organize directory structure by feature and extension after merge"
            git push origin main
          else
            echo "No changes to commit."
